const WeightedDirectionalGraph = require('../src/weighted_directional_graph')

test('adicionar um nó no grafo faz o número de nós virar 1', () => {
    const weightedDirectionalGraph = new WeightedDirectionalGraph()
    weightedDirectionalGraph.add('A')
    expect(weightedDirectionalGraph.nodeNumber).toBe(1)
})

test('uma conexão entre nós deve ter uma direção e um peso', () => {
    const weightedDirectionalGraph = new WeightedDirectionalGraph()
    const nodeA = weightedDirectionalGraph.add('A')
    const nodeB = weightedDirectionalGraph.add('B')
    weightedDirectionalGraph.connectNodes(nodeA, nodeB, 1)
    expect(nodeA.weightTo(nodeB)).toBe(1)
    expect(nodeB.weightTo(nodeA)).toBe(Infinity)
    expect(nodeA.isConnectedTo(nodeB)).toBe(true)
    expect(nodeB.isConnectedTo(nodeA)).toBe(false)
})

test('criação do grafo da internet', () => {
    const weightedDirectionalGraph = new WeightedDirectionalGraph()
    const node1 = weightedDirectionalGraph.add("1")
    const node2 = weightedDirectionalGraph.add("2")
    const node3 = weightedDirectionalGraph.add("3")
    const node4 = weightedDirectionalGraph.add("4")
    const node5 = weightedDirectionalGraph.add("5")
    weightedDirectionalGraph.connectNodes(node1, node2, 1)
    weightedDirectionalGraph.connectNodes(node1, node4, 3)
    weightedDirectionalGraph.connectNodes(node1, node5, 100)
    weightedDirectionalGraph.connectNodes(node2, node3, 5)
    weightedDirectionalGraph.connectNodes(node3, node5, 1)
    weightedDirectionalGraph.connectNodes(node4, node3, 2)
    weightedDirectionalGraph.connectNodes(node4, node5, 6)
    expect(node1.isConnectedTo(node2)).toBe(true)
    expect(node1.isConnectedTo(node4)).toBe(true)
    expect(node1.isConnectedTo(node5)).toBe(true)
    expect(node1.isConnectedTo(node3)).toBe(false)
    expect(node1.weightTo(node2)).toBe(1)
    expect(node1.weightTo(node4)).toBe(3)
    expect(node1.weightTo(node5)).toBe(100)
})